classDiagram
    %% Core Game Classes
    class Game {
        <<libgdx>>
        +setScreen(screen: Screen)
        +render()
    }

    class MainGame {
        -batch: SpriteBatch
        -assetManager: GameAssetManager
        +create()
        +dispose()
        +getBatch(): SpriteBatch
    }

    %% Asset Management
    class GameAssetManager {
        -instance: GameAssetManager
        -assetManager: AssetManager
        +DOOR_TEXTURE: String
        +GAME_FONT: String
        -GameAssetManager()
        +getInstance(): GameAssetManager
        +loadInitialAssets()
        +get(fileName: String, type: Class~T~): T
        +dispose()
    }

    %% Screen Management
    class GameScreen {
        -game: MainGame
        -currentState: GameState
        -stateFactory: StateFactory
        +GameScreen(game: MainGame)
        +setState(state: GameState)
        +render(float)
        +resize(int, int)
        +getStateFactory(): StateFactory
    }

    %% State Management
    class GameState {
        <<abstract>>
        #screen: GameScreen
        #stage: Stage
        #viewport: Viewport
        #camera: OrthographicCamera
        +GameState(screen: GameScreen)
        +enter()
        +exit()
        +update(float)
        +render(float)
    }

    class MenuState {
        -menuTable: MainMenuTable
        +enter()
        +update(float)
    }

    class IntroState {
        -doorTexture: Texture
        -doorImage: Image
        +enter()
        +update(float)
    }

    class PlayState {
        +enter()
        +update(float)
    }

    %% Font Management
    class FontManager {
        -instance: FontManager
        -titleFont: BitmapFont
        -menuFont: BitmapFont
        -regularFont: BitmapFont
        +getInstance(): FontManager
        +getTitleFont(): BitmapFont
        +getMenuFont(): BitmapFont
        +createTitleStyle(): LabelStyle
    }

    %% Factory
    class StateFactory {
        -screen: GameScreen
        +createState(type: StateType): GameState
    }

    class StateType {
        <<enumeration>>
        MENU
        INTRO
        PLAY
    }

    %% Relationships
    Game <|-- MainGame : extends
    MainGame *-- GameAssetManager : uses
    MainGame *-- GameScreen : owns
    GameScreen o-- GameState : manages
    GameScreen o-- StateFactory : uses
    GameState <|-- MenuState : extends
    GameState <|-- IntroState : extends
    GameState <|-- PlayState : extends
    GameState -- FontManager : uses
    GameState -- GameAssetManager : uses
    StateFactory -- StateType : uses
    FontManager -- GameAssetManager : uses

    %% Notes
    note for GameAssetManager "Singleton Pattern for centralized resource management"
    note for GameState "Abstract base class for all game states"
    note for StateFactory "Creates game states using factory pattern"
